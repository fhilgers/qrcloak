# Deps

bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_kotlin", version = "1.9.5")
bazel_dep(name = "rules_java", version = "7.6.0")
bazel_dep(name = "bazel_skylib", version = "1.6.1")
bazel_dep(name = "rules_jvm_external", version = "6.1")
bazel_dep(name = "rules_rust", version = "0.44.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.7.3")
bazel_dep(name = "rules_nodejs", version = "6.1.0")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "aspect_rules_js", version = "1.42.1")
bazel_dep(name = "rules_android", version = "0.2.0")
bazel_dep(name = "rules_buildbuddy", version = "0.0.1")
git_override(
    module_name = "rules_buildbuddy",
    commit = "821a76d320b3f65084b6223eaf48f6c5c3224ec4",
    remote = "https://github.com/fhilgers/buildbuddy-toolchain",
)

git_override(
    module_name = "rules_kotlin",
    commit = "09495433797f89f00790306fad021e8265c1de99",
    patches = ["//patches:rules_kotlin.patch"],
    remote = "https://github.com/bazelbuild/rules_kotlin",
)

git_override(
    module_name = "rules_android",
    commit = "f23bfb0df4815d19cab7cab2d30f3ab2bff99413",
    remote = "https://github.com/fhilgers/rules_android",
)

git_override(
    module_name = "rules_jvm_external",
    commit = "71e08c82709b24d12e2d1040d86caa05bf6a8399",
    remote = "https://github.com/bazelbuild/rules_jvm_external",
)

include("//qrcloak/qrcloak-android:maven.MODULE.bazel")
# maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
# versions = dict(
#     accompanist = "0.35.0-alpha",
#     activity = "1.9.0",
#     camera = "1.4.0-alpha05",
#     compose_bom = "2024.05.00",
#     compose_compiler = "1.5.13",
#     concurrent = "1.1.0",
#     core = "1.13.1",
#     datastore = "1.1.0",
#     fragment = "1.7.0",
#     lifecycle = "2.7.0",
#     mlkit = "17.2.0",
#     qrose = "1.0.1",
#     voyager = "1.0.0",
# )
#
# maven.install(
#     aar_import_bzl_label = "@rules_android//android:rules.bzl",
#     artifacts = [
#         "org.jetbrains.kotlin:kotlin-stdlib:1.9.0",
#         "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.0",
#         "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.0",
#         "org.jetbrains.kotlin:kotlin-reflect:1.9.0",
#         "androidx.collection:collection:1.4.0",
#         "androidx.collection:collection-jvm:1.4.0",
#         "androidx.collection:collection-ktx:1.4.0",
#         "net.java.dev.jna:jna:aar:5.14.0",
#         "androidx.activity:activity:{}".format(versions["activity"]),
#         "androidx.activity:activity-ktx:{}".format(versions["activity"]),
#         "androidx.activity:activity-ktx:aar:{}".format(versions["activity"]),
#         "androidx.activity:activity-compose:{}".format(versions["activity"]),
#         "androidx.compose.compiler:compiler:{}".format(versions["compose_compiler"]),
#         "androidx.core:core:{}".format(versions["core"]),
#         "androidx.core:core-ktx:{}".format(versions["core"]),
#         "androidx.compose.animation:animation",
#         "androidx.compose.animation:animation-core",
#         "androidx.compose.animation:animation-graphics",
#         "androidx.compose.foundation:foundation",
#         "androidx.compose.foundation:foundation-layout",
#         "androidx.compose.material:material",
#         "androidx.compose.material:material-icons-core",
#         "androidx.compose.material:material-icons-extended",
#         "androidx.compose.material:material-icons-extended-android",
#         "androidx.compose.material:material-ripple",
#         "androidx.compose.material3:material3",
#         "androidx.compose.material3:material3-window-size-class",
#         "androidx.compose.runtime:runtime",
#         "androidx.compose.runtime:runtime-livedata",
#         "androidx.compose.runtime:runtime-rxjava2",
#         "androidx.compose.runtime:runtime-rxjava3",
#         "androidx.compose.runtime:runtime-saveable",
#         "androidx.compose.ui:ui",
#         "androidx.compose.ui:ui-geometry",
#         "androidx.compose.ui:ui-graphics",
#         "androidx.compose.ui:ui-test",
#         "androidx.compose.ui:ui-test-junit4",
#         "androidx.compose.ui:ui-test-manifest",
#         "androidx.compose.ui:ui-text",
#         "androidx.compose.ui:ui-text-google-fonts",
#         "androidx.compose.ui:ui-tooling",
#         "androidx.compose.ui:ui-tooling-data",
#         "androidx.compose.ui:ui-tooling-preview",
#         "androidx.compose.ui:ui-unit",
#         "androidx.compose.ui:ui-util",
#         "androidx.compose.ui:ui-viewbinding",
#         "androidx.concurrent:concurrent-futures:{}".format(versions["concurrent"]),
#         "androidx.concurrent:concurrent-futures-ktx:{}".format(versions["concurrent"]),
#         "androidx.fragment:fragment:{}".format(versions["fragment"]),
#         "androidx.fragment:fragment-ktx:{}".format(versions["fragment"]),
#         "androidx.fragment:fragment-ktx:aar:{}".format(versions["fragment"]),
#         "androidx.fragment:fragment-compose:{}".format(versions["fragment"]),
#         "androidx.fragment:fragment-testing:{}".format(versions["fragment"]),
#         "androidx.fragment:fragment-testing-manifest:{}".format(versions["fragment"]),
#         "androidx.lifecycle:lifecycle-common:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-common-java8:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-compiler:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-livedata-ktx:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-livedata-core-ktx:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-process:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-reactivestreams-ktx:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-runtime:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-runtime:aar:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-runtime-ktx:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-runtime-testing:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-service:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-viewmodel-ktx:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-viewmodel-compose:{}".format(versions["lifecycle"]),
#         "androidx.lifecycle:lifecycle-viewmodel-savedstate:{}".format(versions["lifecycle"]),
#         "io.github.alexzhirkevich:qrose:{}".format(versions["qrose"]),
#         "androidx.camera:camera-camera2:{}".format(versions["camera"]),
#         "androidx.camera:camera-core:{}".format(versions["camera"]),
#         "androidx.camera:camera-extensions:{}".format(versions["camera"]),
#         "androidx.camera:camera-lifecycle:{}".format(versions["camera"]),
#         "androidx.camera:camera-mlkit-vision:{}".format(versions["camera"]),
#         "androidx.camera:camera-video:{}".format(versions["camera"]),
#         "androidx.camera:camera-view:{}".format(versions["camera"]),
#         "com.google.mlkit:barcode-scanning:{}".format(versions["mlkit"]),
#         "cafe.adriel.voyager:voyager-navigator-android:{}".format(versions["voyager"]),
#         "cafe.adriel.voyager:voyager-screenmodel-android:{}".format(versions["voyager"]),
#         "cafe.adriel.voyager:voyager-tab-navigator-android:{}".format(versions["voyager"]),
#         "cafe.adriel.voyager:voyager-transitions:{}".format(versions["voyager"]),
#         "androidx.datastore:datastore-preferences-android:{}".format(versions["datastore"]),
#         "com.google.accompanist:accompanist-permissions:{}".format(versions["accompanist"]),
#     ],
#     boms = [
#         "androidx.compose:compose-bom:{}".format(versions["compose_bom"]),
#     ],
#     fail_if_repin_required = True,
#     lock_file = "//:manifest_install.json",
#     repositories = [
#         "https://maven.google.com",
#         "https://repo1.maven.org/maven2",
#     ],
#     resolver = "maven",
#     use_starlark_android_rules = True,
# )
# use_repo(maven, "maven", "unpinned_maven")

rust = use_extension(
    "@rules_rust//rust:extensions.bzl",
    "rust",
)

rust_host_tools = use_extension(
    "@rules_rust//rust:extensions.bzl",
    "rust_host_tools",
)
rust_host_tools.host_tools(
    version = "1.78.0",
)

rust.toolchain(
    edition = "2021",
    extra_target_triples = [
        "wasm32-unknown-unknown",
        "aarch64-linux-android",
        "x86_64-linux-android",
        "i686-linux-android",
        "armv7-linux-androideabi",
    ],
    versions = [
        "1.78.0",
    ],
)
use_repo(rust, "rust_toolchains")

use_repo(rust_host_tools, "rust_host_tools")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//qrcloak:Cargo.lock",
    manifests = [
        "//qrcloak:Cargo.toml",
        "//qrcloak:qrcloak-bindings/Cargo.toml",
        "//qrcloak:qrcloak-cli/Cargo.toml",
        "//qrcloak:qrcloak-core/Cargo.toml",
        "//qrcloak:qrcloak-pandoc/Cargo.toml",
        "//qrcloak:qrcodegen/Cargo.toml",
        "//qrcloak:wasm-bindgen-brand/Cargo.toml",
    ],
)
crate.annotation(
    build_script_env = dict(
        CARGO_PKG_AUTHORS = "",
        CARGO_PKG_DESCRIPTION = "",
        CARGO_PKG_HOMEPAGE = "",
        CARGO_PKG_LICENSE = "",
        CARGO_PKG_REPOSITORY = "",
        RUSTDOC = "",
    ),
    crate = "rav1e",
    repositories = ["crates"],
)
crate.spec(
    features = [
        "cli",
    ],
    git = "https://github.com/mozilla/uniffi-rs",
    package = "uniffi",
    tag = "v0.27.1",
)
crate.annotation(
    crate = "uniffi_testing",
    data = [
        "@rust_host_tools//:cargo",
    ],
    repositories = ["spec-crates"],
    rustc_env = dict(
        CARGO = "$(location @rust_host_tools//:cargo)",
    ),
)
crate.annotation(
    crate = "uniffi_bindgen",
    data = [
        "@rust_host_tools//:cargo",
    ],
    patch_args = ["-p1"],
    patches = [
        "//patches:uniffi_bindgen.patch",
    ],
    repositories = ["spec-crates"],
)
crate.from_specs(
    name = "spec-crates",
)
use_repo(
    crate,
    "crates",
    "spec-crates",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "pandoc",
    build_file_content = """
alias(
  name = "pandoc",
  actual = "bin/pandoc",
  visibility = ["//visibility:public"]
)
""",
    strip_prefix = "pandoc-3.2",
    urls = ["https://github.com/jgm/pandoc/releases/download/3.2/pandoc-3.2-linux-amd64.tar.gz"],
)

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain()
use_repo(node, "nodejs")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    bins = {
        "vinxi": [
            "vinxi=./bin/cli.mjs",
        ],
    },
    data = [
        "//qrcloak/qrcloak-bindings/languages/js:package.json",
        "//qrcloak/qrcloak-word:package.json",
    ],
    generate_bzl_library_targets = True,
    pnpm_lock = "//qrcloak/qrcloak-word:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

bun = use_extension("//tools:bun.bzl", "bun")
use_repo(bun, "bun")

buildbuddy = use_extension("@rules_buildbuddy//:extensions.bzl", "buildbuddy", dev_dependency = True)
buildbuddy.toolchain(
    name = "buildbuddy_toolchain",
)
use_repo(buildbuddy, "buildbuddy_toolchain")

register_toolchains("@rust_toolchains//:all")

register_toolchains("@rules_rust//rust/private/dummy_cc_toolchain:dummy_cc_wasm32_toolchain")

register_toolchains("//toolchains/uniffi:uniffi_toolchain")

register_toolchains(
    "@rules_android//toolchains/android:all",
    "@rules_android//toolchains/android_sdk:all",
)

register_toolchains("@rules_rust//wasm_bindgen:default_wasm_bindgen_toolchain")

register_toolchains("//:kotlin_toolchain")
